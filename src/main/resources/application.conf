sink {
  # Sink type: "console", "jsonlines", "duckdb", or "http"
  # Can be overridden with RUUVI_SINK_TYPE env variable
  sink-type = "console"
  sink-type = ${?RUUVI_SINK_TYPE}

  json-lines {
    # Path to the output file for JSON Lines sink
    # Can be overridden with RUUVI_JSONLINES_PATH env variable
    path = "data/telemetry.jsonl"
    path = ${?RUUVI_JSONLINES_PATH}

    # Enable debug logging (logs each telemetry to debug level)
    # Can be overridden with RUUVI_JSONLINES_DEBUG_LOGGING env variable
    debug-logging = true
    debug-logging = ${?RUUVI_JSONLINES_DEBUG_LOGGING}
  }

  duckdb {
    # Path to the DuckDB database file (use ":memory:" for in-memory database)
    # Can be overridden with RUUVI_DUCKDB_PATH env variable
    # Note: This is ignored when ducklake-enabled = true
    path = "data/telemetry.db"
    path = ${?RUUVI_DUCKDB_PATH}

    # Table name for storing telemetry data
    # Can be overridden with RUUVI_DUCKDB_TABLE_NAME env variable
    table-name = "telemetry"
    table-name = ${?RUUVI_DUCKDB_TABLE_NAME}

    # Enable debug logging (logs each telemetry to debug level)
    # Can be overridden with RUUVI_DUCKDB_DEBUG_LOGGING env variable
    debug-logging = true
    debug-logging = ${?RUUVI_DUCKDB_DEBUG_LOGGING}

    # Desired batch size before pushing to the sink
    # Can be overridden with RUUVI_DUCKDB_DESIRED_BATCH_SIZE env variable
    desired-batch-size = 5
    desired-batch-size = ${?RUUVI_DUCKDB_DESIRED_BATCH_SIZE}

    # Maximum batch latency in seconds before pushing to the sink
    # Can be overridden with RUUVI_DUCKDB_DESIRED_MAX_BATCH_LATENCY_SECONDS env variable
    desired-max-batch-latency-seconds = 30
    desired-max-batch-latency-seconds = ${?RUUVI_DUCKDB_DESIRED_MAX_BATCH_LATENCY_SECONDS}

    # Enable DuckLake mode (lakehouse format with catalog database and parquet files)
    # Can be overridden with RUUVI_DUCKDB_DUCKLAKE_ENABLED env variable
    ducklake-enabled = false
    ducklake-enabled = ${?RUUVI_DUCKDB_DUCKLAKE_ENABLED}

    # DuckLake configuration (only used when ducklake-enabled = true)
    ducklake {
      # Catalog type: "duckdb", "sqlite", or "postgres"
      # Can be overridden with RUUVI_DUCKDB_DUCKLAKE_CATALOG_TYPE env variable
      catalog-type = "sqlite"
      catalog-type = ${?RUUVI_DUCKDB_DUCKLAKE_CATALOG_TYPE}

      # Path to the catalog database file
      # Can be overridden with RUUVI_DUCKDB_DUCKLAKE_CATALOG_PATH env variable
      catalog-path = "data/catalog.sqlite"
      catalog-path = ${?RUUVI_DUCKDB_DUCKLAKE_CATALOG_PATH}

      # Path to the directory where parquet data files will be stored
      # Can be overridden with RUUVI_DUCKDB_DUCKLAKE_DATA_PATH env variable
      data-path = "data/ducklake_files/"
      data-path = ${?RUUVI_DUCKDB_DUCKLAKE_DATA_PATH}
    }
  }

  http {
    # API URL for the ruuvitag-api endpoint
    # Can be overridden with RUUVI_HTTP_API_URL env variable
    api-url = "http://localhost:8081"
    api-url = ${?RUUVI_HTTP_API_URL}

    # Enable debug logging (logs each telemetry to debug level)
    # Can be overridden with RUUVI_HTTP_DEBUG_LOGGING env variable
    debug-logging = true
    debug-logging = ${?RUUVI_HTTP_DEBUG_LOGGING}

    # HTTP request timeout in seconds
    # Can be overridden with RUUVI_HTTP_TIMEOUT_SECONDS env variable
    timeout-seconds = 30
    timeout-seconds = ${?RUUVI_HTTP_TIMEOUT_SECONDS}

    # Maximum number of retry attempts for failed requests
    # Can be overridden with RUUVI_HTTP_MAX_RETRIES env variable
    max-retries = 3
    max-retries = ${?RUUVI_HTTP_MAX_RETRIES}
  }
}
